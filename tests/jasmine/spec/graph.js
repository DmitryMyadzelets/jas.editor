// Generated by CoffeeScript 1.9.2
(function() {
  describe("A 'graph'", function() {
    var editor, graph;
    editor = null;
    graph = null;
    it("Is an object property of jas.Editor() instance", function() {
      editor = new jas.Editor;
      expect(typeof editor).toBe('object');
      graph = editor.graph;
      return expect(typeof graph).toBe('object');
    });
    it("Has 'graph.node' object", function() {
      return expect(typeof graph.node).toBe('object');
    });
    it("Has 'graph.edge' object", function() {
      return expect(typeof graph.edge).toBe('object');
    });
    it("Has 'graph.set_json' function", function() {
      return expect(typeof graph.set_json).toBe('function');
    });
    return it("Has 'graph.get_json' function", function() {
      return expect(typeof graph.get_json).toBe('function');
    });
  });

  describe("A 'graph.node'", function() {
    var editor, graph, node;
    editor = new jas.Editor;
    graph = editor.graph;
    node = graph.node;
    describe("Has methods:", function() {
      it("node.add", function() {
        return expect(typeof node.add).toBe('function');
      });
      it("node.remove", function() {
        return expect(typeof node.remove).toBe('function');
      });
      it("node.text", function() {
        return expect(typeof node.text).toBe('function');
      });
      it("node.move", function() {
        return expect(typeof node.move).toBe('function');
      });
      it("node.mark", function() {
        return expect(typeof node.mark).toBe('function');
      });
      it("node.unmark", function() {
        return expect(typeof node.unmark).toBe('function');
      });
      it("node.initial", function() {
        return expect(typeof node.initial).toBe('function');
      });
      it("node.not_initial", function() {
        return expect(typeof node.not_initial).toBe('function');
      });
      return it("node.stress", function() {
        return expect(typeof node.stress).toBe('function');
      });
    });
    return describe("Has objects:", function() {
      it("node.edge as a reference to graph.edge", function() {
        return expect(node.edge === graph.edge).toBe(true);
      });
      return it("node.data is an instance of Array", function() {
        return expect(node.data instanceof Array).toBe(true);
      });
    });
  });

  describe("A 'graph.edge'", function() {
    var edge, editor, graph;
    editor = new jas.Editor;
    graph = editor.graph;
    edge = graph.edge;
    describe("Has methods:", function() {
      it("edge.add", function() {
        return expect(typeof edge.add).toBe('function');
      });
      it("edge.remove", function() {
        return expect(typeof edge.remove).toBe('function');
      });
      it("edge.text", function() {
        return expect(typeof edge.text).toBe('function');
      });
      it("edge.nodes", function() {
        return expect(typeof edge.nodes).toBe('function');
      });
      return it("edge.stress", function() {
        return expect(typeof edge.stress).toBe('function');
      });
    });
    return describe("Has objects:", function() {
      return it("edge.data is an instance of Array", function() {
        return expect(edge.data instanceof Array).toBe(true);
      });
    });
  });

  describe("A 'graph.get_json' method", function() {
    var editor, graph, o;
    editor = new jas.Editor;
    graph = editor.graph;
    o = graph.get_json();
    return it("Returns an object { nodes, edges } with empty nodes and edges", function() {
      expect(typeof o).toBe('object');
      expect(o.nodes instanceof Array).toBe(true);
      expect(o.edges instanceof Array).toBe(true);
      expect(o.nodes.length).toBe(0);
      return expect(o.edges.length).toBe(0);
    });
  });

  describe("A 'graph.set_json' method", function() {
    var editor, g, graph;
    editor = new jas.Editor;
    graph = editor.graph;
    g = {
      nodes: [{}, {}],
      edges: [
        {
          source: 0,
          target: 1
        }, {
          source: 1,
          target: 0
        }, {
          source: 1,
          target: 1
        }
      ]
    };
    graph.set_json(g);
    describe("Can attach a graph with 2 nodes and 3 edges", function() {
      var o;
      o = graph.get_json();
      return it("And 'graph.get_json' returns an object with 2 nodes and 3 edges", function() {
        console.log(o);
        expect(typeof o).toBe('object');
        expect(o.nodes instanceof Array).toBe(true);
        expect(o.edges instanceof Array).toBe(true);
        expect(o.nodes.length).toBe(2);
        return expect(o.edges.length).toBe(3);
      });
    });
    return describe("The graph can be modified", function() {
      var node;
      node = {};
      it("graph.node.add(node = {}) adds new 3d node", function() {
        graph.node.add(node);
        return expect(graph.get_json().nodes.length).toBe(3);
      });
      it("graph.node.remove(node) removes this node", function() {
        graph.node.remove(node);
        return expect(graph.get_json().nodes.length).toBe(2);
      });
      describe("The same can be done with arrays", function() {
        it("graph.node.add([node]) adds new 3d node", function() {
          graph.node.add([node]);
          return expect(graph.get_json().nodes.length).toBe(3);
        });
        return it("graph.node.remove([node]) removes this node", function() {
          graph.node.remove([node]);
          return expect(graph.get_json().nodes.length).toBe(2);
        });
      });
      it("graph.node.add([node, node]) adds the same node twice", function() {
        graph.node.add([node, node]);
        return expect(graph.get_json().nodes.length).toBe(4);
      });
      return it("graph.node.remove(node) removes one node", function() {
        graph.node.remove(node);
        expect(graph.get_json().nodes.length).toBe(3);
        graph.node.remove(node);
        return expect(graph.get_json().nodes.length).toBe(2);
      });
    });
  });

}).call(this);
